{
    /*
    Here you need to register all the fonts you want to use inside your
    presentation. You technically need two font-files though: one for regular
    text and one for bold text (except if you don't want bold text, then you
    can just reuse the normal font). Here's how you would register a font:

    "NAME": ["PATH_TO_REGULAR_FONT", "PATH_TO_BOLD_FONT"]

    (replace NAME with the name of the font; that's what you'll set any 'font'-
    fields to)
    */
    fonts: {
        /*
        The font OpenSans is included by default (use it by setting the 'font'-
        field of Text-objects to "Default")
        
        NOTE: This default font can be turned off during compilation, so depen-
        ding on your distribution of this software, this font may not be
        included
        */
    },
    slides: [
        // Here is an example of how a slide would be defined:
        {
            // This is the background-color. It could also be a Renderable-
            // object instead; more on those in the next comments
            background: [255,255,255],

            // In here you'll define all the objects of the slide (I call them
            // "Renderable-objects", 'cause that's what they're called in the
            // code).
            content: [
                {
                    // This is the type of the Renderable-object. It defines
                    // what properties it has and how it's rendered.
                    type: "RoundedRect",

                    // This is the position of the object. Like most properties
                    // of Renderable-objects, it consists of equations seperated
                    // by semicolons inside a String. Here are some important
                    // things when writing these equations:
                    // 
                    // - some useful available functions right now are sin(x),
                    //   cos(x), max(x,y,...), min(x,y,...), sqrt(x), exp(x),
                    //   abs(x), floor(x), clamp(x,min,max), isEqual(x,y)
                    //   (a list of all available functions can be found in the
                    //   code)
                    // - the existing constants/variables in every equation are
                    //   pi, e, t (the time since the slide is shown), w (the
                    //   width of the window) and h (the height of the window)
                    // - the percent-character ('%') gets replaced with the
                    //   following string when processing the equations:
                    //   "/100*_" (the underscore is either "w" or "h" depending
                    //   on what makes the most sense in any given situation)
                    pos: "50%;50%",

                    // This is the size of the object. In this case, it consists
                    // of width and height, but it could also represent text-
                    // size for example.
                    size: "10%;10%",

                    // This is the pivot of the object (which point on the
                    // object the position references). It consists of two
                    // parts:
                    // [LEFT/MID/RIGHT]_[TOP/CENTERED/BOTTOM]
                    // The first part defines the horizontal alignment and the
                    // second part defines the vertical alignment of the pivot.
                    // It can also be upper camel case instead of screaming
                    // snake case.
                    alignment: "MID_CENTERED", // "MidCentered" would also work

                    // This is the color of the object. It consists of four
                    // equations (RGBA). The color-values range from 0 to 1.
                    color: "0.3;0.3;0.3;1.0",
                    
                    // This is the corner rounding of the object. It is a
                    // property exclusive to the RoundedRect-object.
                    // Specifically, it defines the radius of the rounded
                    // corners.
                    corner_rounding: "2%",

                    // This is an optional property of every object. It defines
                    // the order of overlapping objects. When not set manually,
                    // it defaults to 0.
                    z: 1
                }
            ]
        }
    ]
}